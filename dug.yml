def cleanup_filtered_schema(schema: dict[str, Any]) -> dict[str, Any]:
    """
    Second pass to remove dangling references and clean up keywords like "required".
    Removes any $ref that can't be resolved and, in objects, filters "required" lists to
    only include keys that exist in the object's "properties".
    """
    def _cleanup(node: Any, root: dict[str, Any]) -> Any:
        if isinstance(node, dict):
            # Resolve $ref if present.
            if "$ref" in node:
                try:
                    resolved = _resolve_ref(node, root)
                    if resolved is None:
                        return None
                    node = resolved
                except ValueError:
                    return None
            new_node = {}
            for key, value in node.items():
                cleaned_value = _cleanup(value, root)
                if cleaned_value is not None:
                    new_node[key] = cleaned_value
            # Clean up "required" arrays: only keep properties that exist.
            if "required" in new_node and isinstance(new_node["required"], list):
                if "properties" in new_node and isinstance(new_node["properties"], dict):
                    new_node["required"] = [
                        r for r in new_node["required"]
                        if r in new_node["properties"]
                    ]
                else:
                    new_node.pop("required")
            return new_node
        elif isinstance(node, list):
            return [item for item in (_cleanup(item, root) for item in node) if item is not None]
        return node

    return _cleanup(schema, schema)
