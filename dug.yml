import logging
import argparse
import sys

# Import the custom formatter if it's in another file
# from .formatters import EmojiFormatter # Example if in formatters.py
# Or, if defined in this file, just use EmojiFormatter directly below

# Import functions/classes from other modules
from core_logic import perform_main_task
from utils.helpers import utility_function

# --- Define EmojiFormatter class here (as shown above) ---
class EmojiFormatter(logging.Formatter):
    LEVEL_EMOJIS = {
        logging.DEBUG:    "üîß",
        logging.INFO:     "‚ÑπÔ∏è",
        logging.WARNING:  "‚ö†Ô∏è",
        logging.ERROR:    "üî•",
        logging.CRITICAL: "üí•",
    }
    log_format = "[%(name)s] %(message)s"

    def __init__(self):
        super().__init__(fmt=self.log_format, datefmt=None, style='%')

    def format(self, record):
        self._style._fmt = self.log_format
        message = super().format(record)
        emoji = self.LEVEL_EMOJIS.get(record.levelno, "‚ùì")
        return f"{emoji} {message}"
# --- End of EmojiFormatter definition ---


# Get a logger for this main module
logger = logging.getLogger(__name__) # logger name will be 'main_cli'

def setup_logging(verbosity_level):
    """Configures the root logger with EmojiFormatter and stdout."""

    if verbosity_level == 0:
        level = logging.WARNING
    elif verbosity_level == 1:
        level = logging.INFO
    else:
        level = logging.DEBUG

    # Get the root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(level)

    # --- Manual Handler Configuration ---
    # Check if handlers already exist (prevents duplicates if called multiple times)
    if not root_logger.handlers:
        # Create a handler to write to standard output
        handler = logging.StreamHandler(sys.stdout)

        # Create our custom formatter
        formatter = EmojiFormatter()

        # Set the formatter for the handler
        handler.setFormatter(formatter)

        # Add the handler to the root logger
        root_logger.addHandler(handler)

    # Don't need basicConfig anymore
    # logging.basicConfig(...) # REMOVE THIS

    logger.debug(f"Logging initialized with level: {logging.getLevelName(level)}")


def main():
    parser = argparse.ArgumentParser(description="My Awesome CLI Tool")
    parser.add_argument(
        '-v', '--verbose',
        action='count',
        default=0,
        help="Increase output verbosity (-v for INFO, -vv for DEBUG)"
    )
    parser.add_argument(
        '--config',
        help="Path to a configuration file (example argument)"
    )
    # Add other CLI arguments as needed

    args = parser.parse_args()

    # Setup logging *after* parsing arguments
    setup_logging(args.verbose)

    logger.info("Starting the main application")
    logger.debug(f"Parsed arguments: {args}")

    if args.config:
        logger.info(f"Using configuration file: {args.config}")

    # --- Call functions from other modules ---
    try:
        perform_main_task()
        # Example of logging different levels
        utility_function("some data")
        utility_function(123) # This should trigger a warning
        logger.error("Simulating a recoverable error condition.")
        # Simulate a critical failure scenario (optional)
        # logger.critical("Critical failure! Cannot proceed.")

        logger.info("Application finished successfully.")
    except Exception as e:
        logger.exception("üí• An unhandled exception occurred!") # Use logger.exception here
        sys.exit(1)


if __name__ == "__main__":
    main()
