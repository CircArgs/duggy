# test_registry.py
import pytest
from c1.genai.compound_ai.tools.registry import ToolRegistry
from c1.genai.compound_ai.tools.tool import Tool
from c1.genai.compound_ai.tools.types import Scope

@pytest.fixture
def clear_registry():
    """
    A fixture to clear the registry before each test.
    Because ToolRegistry is a singleton, we need to ensure we're starting from a clean state.
    """
    registry = ToolRegistry()
    registry._registry.clear()  # Accessing the protected member to clear it for test isolation.
    return registry

def test_singleton_behavior(clear_registry):
    """
    Ensure that multiple instantiations of ToolRegistry refer to the same underlying instance.
    """
    first_registry = clear_registry
    second_registry = ToolRegistry()
    assert first_registry is second_registry, "ToolRegistry is not acting as a singleton."

def test_add_and_get_tool(clear_registry):
    """
    Verify that adding a tool to the registry allows retrieval by name.
    """
    registry = clear_registry

    # Create a dummy Tool instance. Real tests might use actual functions or a mock.
    dummy_tool = Tool(
        name="dummy",
        description="A dummy tool for testing.",
        input_model={"type": "object", "properties": {}},
        output_model={"type": "object", "properties": {}},
        scope=Scope.PUBLIC,
        func=lambda: {"result": "ok"}
    )
    registry.add_tool(dummy_tool)

    retrieved_tool = registry.get_tool("dummy")
    assert retrieved_tool is dummy_tool, "Retrieved tool is not the same as the added tool."

def test_get_tool_not_found(clear_registry):
    """
    Ensure that getting a tool by name returns None if it doesn't exist.
    """
    registry = clear_registry
    retrieved = registry.get_tool("does_not_exist")
    assert retrieved is None, "Expected None when retrieving a nonexistent tool."

def test_list_tools(clear_registry):
    """
    Verify that listing tools returns all registered tools.
    """
    registry = clear_registry
    tool_a = Tool(
        name="tool_a",
        description="Tool A",
        input_model={"type": "object", "properties": {}},
        output_model={"type": "object", "properties": {}},
        scope=Scope.PUBLIC,
        func=lambda: {"result": "A"}
    )
    tool_b = Tool(
        name="tool_b",
        description="Tool B",
        input_model={"type": "object", "properties": {}},
        output_model={"type": "object", "properties": {}},
        scope=Scope.PUBLIC,
        func=lambda: {"result": "B"}
    )

    registry.add_tool(tool_a)
    registry.add_tool(tool_b)

    all_tools = registry.list_tools()
    assert len(all_tools) == 2, "Expected two tools in registry."
    assert tool_a in all_tools, "Tool A not found in registry list."
    assert tool_b in all_tools, "Tool B not found in registry list."

def test_overwrite_tool(clear_registry):
    """
    If a new tool is added with the same name, verify behavior.
    (Depending on your design, you could raise an error instead.)
    """
    registry = clear_registry
    original_tool = Tool(
        name="overwrite",
        description="Original tool",
        input_model={"type": "object", "properties": {}},
        output_model={"type": "object", "properties": {}},
        scope=Scope.PUBLIC,
        func=lambda: {"result": "original"}
    )
    replacement_tool = Tool(
        name="overwrite",
        description="Replacement tool",
        input_model={"type": "object", "properties": {}},
        output_model={"type": "object", "properties": {}},
        scope=Scope.PUBLIC,
        func=lambda: {"result": "replacement"}
    )

    registry.add_tool(original_tool)
    registry.add_tool(replacement_tool)
    current_tool = registry.get_tool("overwrite")
    assert current_tool is replacement_tool, "ToolRegistry did not overwrite as expected."

def test_cross_library_behavior(clear_registry):
    """
    Test that a tool registered by one 'library' (the 'author library') is visible
    to another 'library' (the 'user library') via the same registry singleton.
    
    In real code, these would live in separate packages/modules, but this test simulates
    that scenario by having both libraries import the exact same ToolRegistry path.
    """

    # Simulate "author library" code.
    def register_author_tool():
        registry = ToolRegistry()  # same import path as user
        author_tool = Tool(
            name="author_tool",
            description="Tool from the author library",
            input_model={"type": "object", "properties": {}},
            output_model={"type": "object", "properties": {}},
            scope=Scope.PUBLIC,
            func=lambda: {"result": "author"}
        )
        registry.add_tool(author_tool)

    # Simulate "user library" code.
    def get_registered_tools():
        registry = ToolRegistry()  # same import path as author
        return registry.list_tools()

    # Step 1: Author library registers its tool.
    register_author_tool()

    # Step 2: User library retrieves what's in the registry.
    tools = get_registered_tools()
    tool_names = [t.name for t in tools]

    assert "author_tool" in tool_names, (
        "Expected to find the tool registered by the author library. "
        "The user library doesn't see it, which suggests a mismatch in imports!"
    )
