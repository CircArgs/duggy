import os
import time
import requests
import logging

class FileSyncHandler(FileSystemEventHandler):
    def __init__(self, local_dir, server_url):
        self.local_dir = local_dir
        self.server_url = server_url

    def is_valid_file(self, path):
        """Check if a file is valid for syncing."""
        return os.path.exists(path) and os.path.isfile(path)

    def upload_file(self, file_path):
        """Upload a file with error handling and retries."""
        if not self.is_valid_file(file_path):
            logging.warning(f"File not found or invalid: {file_path}")
            return

        relative_path = os.path.relpath(file_path, self.local_dir)
        attempts = 3
        for attempt in range(attempts):
            try:
                with open(file_path, "rb") as file:
                    response = requests.post(
                        f"{self.server_url}/update-file/",
                        data={"filepath": relative_path},
                        files={"file": file},
                        timeout=5
                    )

                if response.status_code == 200:
                    logging.info(f"Uploaded: {relative_path} - {response.status_code}")
                    return
                else:
                    logging.error(f"Failed to upload {relative_path}, retrying...")
            except (requests.RequestException, IOError) as e:
                logging.error(f"Error uploading {relative_path}: {e}")

            time.sleep(2)  # Wait before retrying

        logging.error(f"Failed to upload {relative_path} after {attempts} attempts.")

    def delete_file(self, file_path):
        """Delete a file with error handling."""
        relative_path = os.path.relpath(file_path, self.local_dir)
        try:
            response = requests.delete(
                f"{self.server_url}/delete-file/",
                data={"filepath": relative_path},
                timeout=5
            )

            if response.status_code == 200:
                logging.info(f"Deleted: {relative_path} - {response.status_code}")
            else:
                logging.error(f"Failed to delete {relative_path}, server responded with {response.status_code}")
        except requests.RequestException as e:
            logging.error(f"Network error while deleting {relative_path}: {e}")

    def on_created(self, event):
        """Handle file creation event with delay to avoid race conditions."""
        if not event.is_directory:
            time.sleep(1)  # Give time for file to be fully written
            self.upload_file(event.src_path)

    def on_deleted(self, event):
        """Handle file deletion event safely."""
        if not event.is_directory:
            self.delete_file(event.src_path)
