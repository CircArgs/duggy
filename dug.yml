To generate a JSON Schema from a Python function's signature without using Pydantic, you can utilize Python's built-in `inspect` module to introspect the function's parameters and their type annotations. Here's a step-by-step guide to creating a utility function that performs this task:

1. **Import Necessary Modules**:
   Begin by importing the `inspect` module for introspection and the `typing` module to handle advanced type hints.

   ```python
   import inspect
   from typing import get_type_hints, Union, List, Dict, Any
   ```


2. **Define a Type Mapping**:
   Create a dictionary that maps Python types to their corresponding JSON Schema types. This mapping will help translate Python type hints into JSON Schema property definitions.

   ```python
   python_to_json_schema = {
       str: {"type": "string"},
       int: {"type": "integer"},
       float: {"type": "number"},
       bool: {"type": "boolean"},
       list: {"type": "array"},
       dict: {"type": "object"},
       type(None): {"type": "null"},
   }
   ```


3. **Handle Complex Types**:
   Define a function to process complex types such as `List`, `Dict`, and `Union`. This function will recursively determine the appropriate JSON Schema representation for these types.

   ```python
   def get_json_schema_type(py_type: Any) -> Dict[str, Any]:
       if py_type in python_to_json_schema:
           return python_to_json_schema[py_type]
       elif hasattr(py_type, "__origin__"):
           origin = py_type.__origin__
           args = py_type.__args__
           if origin is list or origin is List:
               return {"type": "array", "items": get_json_schema_type(args[0])}
           elif origin is dict or origin is Dict:
               return {"type": "object", "additionalProperties": get_json_schema_type(args[1])}
           elif origin is Union:
               return {"anyOf": [get_json_schema_type(arg) for arg in args]}
       return {"type": "string"}  # Default fallback
   ```


4. **Extract Function Metadata**:
   Create a function that extracts the function's name, docstring, parameters, and their respective types to construct the JSON Schema.

   ```python
   def generate_json_schema_from_function(func) -> Dict[str, Any]:
       schema = {
           "title": func.__name__,
           "description": inspect.getdoc(func),
           "type": "object",
           "properties": {},
           "required": [],
       }

       sig = inspect.signature(func)
       type_hints = get_type_hints(func)

       for param_name, param in sig.parameters.items():
           if param_name == "return":
               continue

           param_type = type_hints.get(param_name, Any)
           json_type = get_json_schema_type(param_type)

           schema["properties"][param_name] = json_type

           if param.default == inspect.Parameter.empty:
               schema["required"].append(param_name)

       if not schema["required"]:
           del schema["required"]

       return schema
   ```


5. **Example Usage**:
   Define a sample function with type annotations and generate its JSON Schema using the utility function.

   ```python
   def example_function(name: str, age: int, interests: List[str], preferences: Dict[str, bool], active: bool = True) -> None:
       """
       An example function that demonstrates various parameter types.
       """
       pass

   schema = generate_json_schema_from_function(example_function)
   print(schema)
   ```


   **Output**:
   ```json
   {
       "title": "example_function",
       "description": "An example function that demonstrates various parameter types.",
       "type": "object",
       "properties": {
           "name": {"type": "string"},
           "age": {"type": "integer"},
           "interests": {"type": "array", "items": {"type": "string"}},
           "preferences": {"type": "object", "additionalProperties": {"type": "boolean"}},
           "active": {"type": "boolean"}
       },
       "required": ["name", "age", "interests", "preferences"]
   }
   ```


   In this output:
   - The `title` is the function's name.
   - The `description` is extracted from the function's docstring.
   - The `properties` dictionary contains each parameter with its corresponding JSON Schema type.
   - The `required` list includes parameters that do not have default values.

**Notes**:
- This utility function supports basic Python types and common generics like `List`, `Dict`, and `Union`. You can extend the `get_json_schema_type` function to handle additional complex types as needed.
- The function relies on type hints; parameters without type annotations will default to a JSON Schema type of `string`.
- This approach does not depend on external libraries like Pydantic, making it suitable for projects where you prefer to avoid additional dependencies.

By utilizing Python's introspection capabilities, this utility function provides a straightforward method to generate JSON Schemas directly from function definitions, facilitating tasks such as validation, documentation, and integration with systems that utilize JSON Schema. 
